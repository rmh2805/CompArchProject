Opcodes are a single byte

CPU Control:
	  OPC | Mnemonic | Description 
	------+----------+------------------------
	 0x00 |   NOP    | Noop
	 0x01 |   HLT    | Halts the CPU
	 0x02 |   CLR    | dst <- $0
	 0x03 |   DMP    | Dump value to trace
	 0x04 |   OUT    | Output value to port

Basic Arithmetic and Logic:
	  OPC | Mnemonic | Description 
	------+----------+------------------------
	 0x10 |   ADD    | dst <- src1 + src2
	 0x11 |   SUB    | dst <- src1 - src2
	 0x12 |   MUL    | dst <- src1 * src2
	 0x13 |   DIV    | dst <- src1 / src2
	 0x14 |   MOD    | dst <- src1 % src2
	 0x15 |   AND    | dst <- src1 & src2
	 0x16 |   OR     | dst <- src1 | src2
	 0x17 |   XOR    | dst <- src1 ^ src2
	 0x18 |   CMP    | dst <- ~src
	 0x19 |   INC    | dst <- dst + 1
	 0x1a |   DEC    | dst <- dst - 1

Memory Management:
	  OPC | Mnemonic | Description 
	------+----------+------------------------
	 0x20 |   MOV    | dst <- src
	 0x21 |   SWP    | dst <- src, src <- dst
	 0x22 |   CPY    | Memory block copy

Change of Location:
	  OPC | Mnemonic | Description 
	------+----------+------------------------
	 0x31 |   JMP    | Jump to specified location
	 0x32 |   JAL    | Function call
	 0x33 |   RET    | Function return
	 0x34 |   BEQ    | Branch if src1 == src2
	 0x35 |   BNE    | Branch if src1 != src2
	 0x36 |   BGT    | Branch if src1 >  src2
	 0x37 |   BGE    | Branch if src1 >= src2
	 0x38 |   BOV    | Branch on ALU overflow
	 0x39 |   BCY    | Branch on ALU carry
	 0x3A |   BIE    | Branch if increment is equal (loops)
	 0x3B |   BDE    | Branch if decrement is equal (loops)
	 
(Unspecified opcodes are noop)
