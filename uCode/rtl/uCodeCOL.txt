Micro Execution RTL for COL

JMP:
    PC <- OP1Val, goto Writeback

JAL:
    uTmp <- pB, uR0 <- pS - 4
    uCnt <- 0x03, <No Op>

JAL_LOOP_PB:
    MAR <- uCnt, MDR <- uTmp
    Mem[MAR] <- MDR, <No Op>
    
    uTmp <- uTmp >> 8, uR0 <- uR0 + 1
    if uCnt == 0x00, goto JAL_BREAK_PB
    uCnt <- uCnt - 1, goto JAL_LOOP_PB

JAL_BREAK_PB:
    pB <- pS - 4, <No Op> // Quickly reset pB
    uTmp <- pR, uR0 <- pS - 8 // Setup uTmp and uR0 again for pS
    uCnt <- 0x03, <No Op> // Reset uCnt

JAL_LOOP_PR:
    MAR <- uCnt, MDR <- uTmp
    Mem[MAR] <- MDR, <No Op>
    
    uTmp <- uTmp >> 8, uR0 <- uR0 + 1
    if uCnt == 0x00, goto JAL_BREAK_PR
    uCnt <- uCnt - 1, goto JAL_LOOP_PR

JAL_BREAK_PR:
    pS <- pS - 8, pR <- PC
    PC <- OP1Val, goto Writeback

RET:
    PC <- pR, <No Op>                       // Use current return ptr
    uR0 <- pB - 4, uCnt <- 0x03             // Prepare for pR read

RET_LOOP_PR:
    MAR <- uR0, <No Op>
    MDR <- Mem[MAR], pR <- pR << 0x08       // Shift for next byte
    pR <- pR | MDR, uR0 <- uR0 + 1          // Insert next byte
    if uCnt == 0x00, goto RET_BREAK_PR
    uCnt <- uCnt - 1, goto RET_LOOP_PR

RET_BREAK_PR:
    pS <- pB + 4, <No Op>                   // Restore PS
    uCnt <- 0x03, uR0 <- pB                 // Prepare for pB read

RET_LOOP_PB:
    // Do pB read
    MAR <- uR0, <No Op>
    MDR <- Mem[MAR], pB <- pB << 0x08       // Shift for next byte
    pB <- pB | MDR, uR0 <- uR0 + 1          // Insert next byte
    if uCnt == 0x00, goto Writeback
    uCnt <- uCnt - 1, goto RET_READ_PB

BEQ:
    uTmp <- OP1Val - OP2Val, <No OP>
    if uTmp != 0, goto Writeback
    PC <- OP3Val, goto Writeback

BNE:
    uTmp <- OP1Val - OP2Val, <No OP>
    if uTmp == 0, goto Writeback
    PC <- OP3Val, goto Writeback

BGT:
    uTmp <- OP2Val - OP1Val, <No Op>    # uTmp <- src2 - src1
    uTmp <- uTmp >> 24, <No Op>         # Retain the high byte of uTmp

    if uTmp & 0x80 != 0x80, goto Writeback
    PC <- OP3Val, goto Writeback

BGE:
    uTmp <- OP1Val - OP2Val, <No Op>    # uTmp <- src1 - src2
    uTmp <- uTmp >> 24, <No Op>         # Retain the high byte of uTmp

    if uTmp & 0x80 == 0x80, goto Writeback
    PC <- OP3Val, goto Writeback

BIE:
    <No Op>, uTmp <- OP1Val + 1         # Compute the basic increment
    uR0 <- uTmp, uTmp <- uTmp - OP2Val  # Save the incremented value and compare with src2
    
    if uTmp != 0, goto Writeback
    PC <- OP3Val, goto Writeback


BDE:
    <No Op>, uTmp <- OP1Val - 1         # Compute the basic decrement
    uR0 <- uTmp, uTmp <- uTmp - OP2Val  # Save the decremented value and compare with src2
    
    if uTmp != 0, goto Writeback
    PC <- OP3Val, goto Writeback

BAO:
   <No Op>, uTmp <- ALU.OVERFLOW
   if uTmp != 1, goto Writeback
   PC <- OP1Val, goto Writeback

BAC:
   <No Op>, uTmp <- ALU.CARRY
   if uTmp != 1, goto Writeback
   PC <- OP1Val, goto Writeback

