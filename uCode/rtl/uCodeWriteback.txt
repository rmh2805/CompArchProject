Writeback:
    if IR in noOps, goto Fetch

    if IR == 0x02, goto WritebackAdd        # Writeback for CLR 
    if IR == 0x03, goto Fetch               # Writeback for DMP (none)
    if IR == 0x04, goto Fetch               # Writeback for OUT (none)

    if IR == 0x10, goto WritebackAdd        # Writeback for ADD
    if IR == 0x11, goto WritebackAdd        # Writeback for SUB
    if IR == 0x12, goto WritebackMul        # Writeback for MUL
    if IR == 0x13, goto WritebackMul        # Writeback for DIV
    if IR == 0x14, goto WritebackAdd        # Writeback for MOD
    if IR == 0x15, goto WritebackAdd        # Writeback for AND
    if IR == 0x16, goto WritebackAdd        # Writeback for OR
    if IR == 0x17, goto WritebackAdd        # Writeback for XOR
    if IR == 0x18, goto WritebackAdd        # Writeback for CMP
    if IR == 0x19, goto WritebackInc        # Writeback for INC
    if IR == 0x1A, goto WritebackInc        # Writeback for DEC

    if IR == 0x20, goto WritebackAdd        # Writeback for MOV
    if IR == 0x21, goto WritebackSwp        # Writeback for SWP
    if IR == 0x22, goto Fetch               # Writeback for CPY (none)

    if IR == 0x31, goto Fetch               # Writeback for JMP (none)
    if IR == 0x32, goto Fetch               # Writeback for JAL (none)
    if IR == 0x34, goto Fetch               # Writeback for BEQ (none)
    if IR == 0x35, goto Fetch               # Writeback for BNE (none)
    if IR == 0x36, goto Fetch               # Writeback for BGT (none)
    if IR == 0x37, goto Fetch               # Writeback for BGE (none)
    if IR == 0x38, goto Fetch               # Writeback for BIE (none)
    if IR == 0x39, goto Fetch               # Writeback for BDE (none)
    if IR == 0x3A, goto Fetch               # Writeback for BAO (none)
    if IR == 0x3B, goto Fetch               # Writeback for BAC (none)

WritebackAdd:
    # Apply prefixes (and truncation) to this value
    uR1 <- OP1Type, <No Op>
    uRet <- uPC, goto PrefixRet
    OP4Val <- uR0, <No Op>                  # Stash the value for later

    # Calculate Scaled EA in case of memory OP 1
    uCnt <- OP1Val, uR1 <- OP1Type
    uRet <- uPC, goto MemRet
    uCnt <- OP1Scale, uR1 <- uR0
    uRet <- uPC, goto ScaleOp

    # Write out with known values
    uR1 <- uR0, uR0 <- OP1Type
    uCnt <- OP1Val, uR2 <- OP4Val
    uRet <- uPC, goto WriteRet
    <No Op>, goto Fetch

WritebackMul:
    OP3Val <- uR0, uR0 <- uR1               # Store uR0 for later, work on uR1

    # Apply prefixes (and truncation) to second return
    uR1 <- OP2Type, <No Op>
    uRet <- uPC, goto PrefixRet
    OP4Val <- uR0, <No Op>                  # Stash the value for later

    # Calculate Scaled EA in case of memory OP 2
    uCnt <- OP2Val, uR1 <- OP2Type
    uRet <- uPC, goto MemRet
    uCnt <- OP2Scale, uR1 <- uR0
    uRet <- uPC, goto ScaleOp

    # Write out with known values
    uR1 <- uR0, uR0 <- OP1Type
    uCnt <- OP2Val, uR2 <- OP4Val
    uRet <- uPC, goto WriteRet
    uR0 <- OP3Val, goto WritebackAdd        # And write out for first operand

WritebackInc:
    OP1Val <- OP2Val, OP1Type <- OP2Type    # Restore original operand values
    OP1Scale <- OP2Scale, goto WritebackAdd # And then writeback as in ADD

WritebackSwp:
    OP1Val <- OP3Val, OP2Val <- OP4Val      # Op 1 <- Op 3, Op 2 <- Op 4
    OP1Type <- OP3Type, OP2Type <- OP4Type
    OP1Scale <- OP3Scale, OP4Scale <- OP2Scale
    <No Op>, goto WritebackMul              # Returns and targets now match