# Prefix Op:
#   This microfunction will apply prefix bytes to a value
# Args:
#   uR0: The value to handle
#   uR1: The related OpType
# Uses:
#   uTmp
# Returns:
#   uR0: The value from OpVal with prefixes applied (and memory accessed) (run 
#        EvalOp and ScaleOp first to get value/EA)
#
PrefixOp:
    if uR1 & 0xF0 != 0x70, goto PrefixOp2   # Start loop if not displacement
    uR1 <- uR1 & 0x00FFFFFF, goto PrefixOp2 # Yeet reg byte, start loop

PrefixOp1:
    uTmp <- uR1 & 0xFF, <No Op>             # Grab the next prefix byte
    
    if uTmp == 0x00, goto uRet              # Break on null byte
    
    if uTmp != 0x01, goto +1                # if sign extension, extend sign
    uR0 <- signExtend(uR0), goto PrefixOp2

    <No Op>, goto halt                      # halt on unrecognized prefix
    
PrefixOp2:
    uR1 <- uR1 >> 8, goto PrefixOp1
